// 1. Definici\'on de un cubo

const vertices = [
-1.0, -1.0, 1.0,
-1.0, 1.0, 1.0,
-1.0,-1.0,-1.0,
-1.0, 1.0,-1.0,
1.0,-1.0, 1.0,
1.0, 1.0, 1.0,
1.0,-1.0,-1.0,
1.0, 1.0,-1.0
	];

const colors = [
    1.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0
];

const indices = [
1, 2, 0,
3, 6, 2,
7, 4, 6,
5, 0, 4,
6, 0, 2,
3, 5, 7,
1, 3, 2,
3, 7, 6,
7, 5, 4,
5, 1, 0,
6, 4, 0,
3, 1, 5
];

// 2 GetShader

const getShader = async function (ctxt,sname, shaderType) { 

async function compiling(ctxt, scriptText) {
    const script_text = scriptText.trim();
    let shader = null;
    if (shaderType == 'x-shader/x-vertex') {
    shader = ctxt.createShader(ctxt.VERTEX_SHADER);
    }
    else if (shaderType == 'x-shader/x-fragment') {
    shader = ctxt.createShader(ctxt.FRAGMENT_SHADER);
    }
    ctxt.shaderSource(shader, scriptText);
    ctxt.compileShader(shader);
    if (!ctxt.getShaderParameter(shader,
        ctxt.COMPILE_STATUS)) {
            comperror = context.getShaderInfoLog(shader);
            let error = new Error(
                "Resultado de la compilación erróneo: "
                +comperror);
                
    throw error;
    }
    else if (!shader) {
    let error = new Error(" No se pudo crear un shader para ser compilado");
        throw error;
    }
    else {
    return shader;
    }

}

try {

const response = await window.fetch(`http://localhost:8000/${sname}`);
const scriptText = await response.text();
const compShader =  await compiling(ctxt, scriptText);
return compShader;

} 
catch (error) {
let response = new Error("En getShader:" + error);
throw response;
}
}

// 3 Init

async function init() {

async function programToContext(vs, ps) {
// Creación de un programa shader
// Inclusión de los programas compilados
// linkado y carga
shader = context.createProgram();
context.attachShader(shader, vs);
context.attachShader(shader, ps);
context.linkProgram(shader);
if (!context.getProgramParameter(shader,
    context.LINK_STATUS)) {
    let error = new Error(
        "Error en la fase de linking");
    throw error;

}

context.useProgram(shader);

// Registramos loc de un atributo aVertexPosition
// para su uso posterior.
positionAttribLocation =
    context.getAttribLocation(shader,
        'aPosition');
colorAttribLocation =
    context.getAttribLocation(shader,
        'aColor');
projectionUniformLocation =
    context.getUniformLocation(shader,
        'projection');
modelViewUniformLocation =
    context.getUniformLocation(shader,
        'modelview');

return context.getProgramParameter(shader,
    context.LINK_STATUS);
}

const canvas =
    document.getElementById('webgl-canvas');

if (!canvas){
    let error = new Error(
        'Sorry! No canvas element');
    throw error;
}

context = canvas.getContext("webgl2");
context.canvas.width = window.innerWidth;
context.canvas.height = window.innerHeight;
if (!context) {
    let error = new Error(
        "No se creo el contexto");
    throw error;
}
const vs = await getShader(
    context, "shaders/shader.vert",
        'x-shader/x-vertex');
const ps = await getShader(
    context, "shaders/shader.frag",
        'x-shader/x-fragment');
return await programToContext(vs, ps);

}

// 4. Variables globales

var context, shader;
var positionAttribLocation, colorAttribLocation;
var projectionUniformLocation,modelViewUniformLocation;

// 5. Inicializaci'on de bufferes

async function initbuffer() {

try {

// Uniform: buffer de vértices: posiciones
vertexBuffer = context.createBuffer();
context.bindBuffer(context.ARRAY_BUFFER, vertexBuffer);
context.bufferData(context.ARRAY_BUFFER,
    new Float32Array(vertices), context.STATIC_DRAW);

// Uniform:  buffer de vértices: colores
colorBuffer = context.createBuffer();
context.bindBuffer(context.ARRAY_BUFFER, colorBuffer);
        context.bufferData(context.ARRAY_BUFFER,
            new Float32Array(colors), context.STATIC_DRAW);


// Index Buffer Object
indexBuffer = context.createBuffer();
context.bindBuffer(context.ELEMENT_ARRAY_BUFFER, indexBuffer);
context.bufferData(context.ELEMENT_ARRAY_BUFFER, 
    new Uint16Array(indices), context.STATIC_DRAW);

// Liberamos
context.bindBuffer(context.ARRAY_BUFFER, null);
context.bindBuffer(context.ELEMENT_ARRAY_BUFFER, null);
return true;
}
catch (error) {
    throw error;
}
}

// 6. Inicializaci'on del estado del mundo

var mMat,vMat,pMat,mvMat;
var lastupdate=0;

function initworld() {
    pMat = mat4.create();
    vMat = mat4.create();
    mMat = mat4.create();
    mvMat= mat4.create();
    mat4.translate(mMat,
        mMat,
        [0.0, 0.0, -5.0]);
    var eye,pos,up;
    eye = vec3.create();
    eye.set(0.0,0.0,0.0);
    pos = vec3.create();
    pos.set(0.0,0.0,-10.0);
    up = vec3.create();
    up.set(0.0,1.0,0.0);
    mat4.lookAt(vMat,eye,pos,up);
    mat4.multiply(mvMat,mMat,vMat);
    
	

    
}

// 7. Bucle del juego
var lastupdate=0
function gameloop(timestamp) {
 step = timestamp - lastupdate;
 lastupdate = timestamp;
 
 update(step);

 draw();
 
 window.requestAnimationFrame(gameloop);

} 

// 8. update

function update(step) {
const vel = 50 / 1000;
let delta = (step * vel) % 360;
    
// Preparamos transformaciones
const FOV = 45 * Math.PI / 180;
const r = context.canvas.clientWidth / context.canvas.clientHeight;
const near = 0.1;
const far = null;
mat4.perspective(pMat, FOV, r, near, far);
const axis = vec3.fromValues(0.0, 1.0, 0.0);
mat4.rotate(mMat, mMat, delta * Math.PI / 180, axis);
mat4.multiply(mvMat,mMat,vMat);
}



function draw () {

    context.clearColor(0.0, 0.0, 1.0, 1.0);
    context.clearDepth(1.0);
    context.depthFunc(context.LEQUAL);
    context.enable(context.DEPTH_TEST);
    context.enable(context.CULL_FACE);
    context.clear(context.COLOR_BUFFER_BIT |
        context.DEPTH_BUFFER_BIT);

    context.viewport(0, 0, context.canvas.width,
        context.canvas.height);

    context.bindBuffer(context.ARRAY_BUFFER, vertexBuffer);
context.enableVertexAttribArray(positionAttribLocation);
context.vertexAttribPointer(positionAttribLocation,
    3, context.FLOAT, false, 0, 0);

context.bindBuffer(context.ARRAY_BUFFER, colorBuffer);
context.enableVertexAttribArray(colorAttribLocation);
context.vertexAttribPointer(colorAttribLocation,
    4, context.FLOAT, false, 0, 0);

context.bindBuffer(context.ELEMENT_ARRAY_BUFFER, indexBuffer);
context.uniformMatrix4fv(projectionUniformLocation, false, pMat);
context.uniformMatrix4fv(modelViewUniformLocation, false, mvMat);

context.drawElements(context.TRIANGLES,
        indices.length,
        context.UNSIGNED_SHORT, 0);
    
context.bindBuffer(context.ELEMENT_ARRAY_BUFFER, null);
context.bindBuffer(context.ARRAY_BUFFER, null);


}


window.addEventListener("load", function (event) {
init()
    .then(v => {
        console.log('Terminada la inicialización ' + v);
        return initbuffer();
    })
    .then(v => {
        if (v) {
        console.log('Terminada la inicialización de los buffer');
        initworld();
        return window.requestAnimationFrame(gameloop);
        }
    });
});
